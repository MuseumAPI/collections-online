@using CollectionsOnline.Core.Models
@using CollectionsOnline.WebSite.Extensions
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CollectionsOnline.WebSite.Features.Specimens.SpecimenViewTransformerResult>
@{
    Layout = "layout.cshtml";
}
<div class="container no-nav">
    <div class="row">
        <div class="col-md-12">
            <div class="record">
                <div class="title">
                    <h1>
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ScientificName))
                        {
                            <em>@Model.Specimen.ScientificName</em>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ObjectName))
                        {
                            @Model.Specimen.ObjectName
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.RegistrationNumber))
                        {
                            @Model.Specimen.RegistrationNumber
                        }
                    </h1>
                </div>

                <div class="images">
                    @{
                        var imageMedia = Model.Specimen.Media.Where(x => x is ImageMedia).Cast<ImageMedia>().ToList();
                        for (int i = 0; i < imageMedia.Count; i++)
                        {
                            if (i == 0)
                            {
                                <img src="@imageMedia[i].Medium.Uri" width="@imageMedia[i].Medium.Width" height="@imageMedia[i].Medium.Height" class="img-rounded center-block" />
                            }
                            else
                            {
                                <img src="@imageMedia[i].Thumbnail.Uri" width="100" height="100" class="img-thumbnail" />
                            }
                        }
                    }
                </div>

                @if (Model.Specimen.MuseumLocation != null)
                {
                    <div class="on-display">
                        On display <a href="/search?museumlocation=@HttpUtility.UrlEncode(@Model.Specimen.MuseumLocation.Gallery)">@Model.Specimen.MuseumLocation.Gallery</a>, <a href="/search?museumlocation=@HttpUtility.UrlEncode(@Model.Specimen.MuseumLocation.Venue)">@Model.Specimen.MuseumLocation.Venue</a>
                    </div>
                }
                
                <div class="main-content">
                    <dl>
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Summary))
                        {
                            <dt>Summary</dt>
                            <dd>@Model.Specimen.Summary</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ObjectSummary))
                        {
                            <dt>Object Summary</dt>
                            <dd>@Model.Specimen.ObjectSummary</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Significance))
                        {
                            <dt>Significance</dt>
                            <dd>@Model.Specimen.Significance</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.IsdDescriptionOfContent))
                        {
                            <dt>Description Of Content</dt>
                            <dd>@Model.Specimen.IsdDescriptionOfContent</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TypeStatus))
                        {
                            <dt>Type Status</dt>
                            <dd>@Model.Specimen.TypeStatus</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ScientificName))
                        {
                            <dt>Scientific Name</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.ScientificName)">@Model.Specimen.ScientificName</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Author))
                        {
                            <dt>Scientific Name Author</dt>
                            <dd>@Model.Specimen.Taxonomy.Author</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.CommonName))
                        {
                            <dt>Common Name</dt>
                            <dd>@Model.Specimen.Taxonomy.CommonName</dd>
                        }
                        @if (Model.Specimen.Taxonomy.OtherCommonNames.Any())
                        {
                            <dt>Other Common Names</dt>
                            <dd>
                                @foreach (var otherCommonNames in @Model.Specimen.Taxonomy.OtherCommonNames)
                                {
                                    <span>@otherCommonNames</span>
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.IdentifiedBy))
                        {
                            <dt>Identified By</dt>
                            <dd>@Model.Specimen.IdentifiedBy</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.DateIdentified))
                        {
                            <dt>Date Identified</dt>
                            <dd>@Model.Specimen.DateIdentified</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.NumberOfSpecimens))
                        {
                            <dt>Number Of Specimens</dt>
                            <dd>@Model.Specimen.NumberOfSpecimens</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ClutchSize))
                        {
                            <dt>Clutch Size</dt>
                            <dd>@Model.Specimen.ClutchSize</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Sex))
                        {
                            <dt>Sex</dt>
                            <dd>@Model.Specimen.Sex</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.StageOrAge))
                        {
                            <dt>Stage Or Age</dt>
                            <dd>@Model.Specimen.StageOrAge</dd>
                        }
                        @if (Model.Specimen.Storages.Any())
                        {
                            <dt>Specimen Nature</dt>
                            <dd>
                                @foreach (var storage in @Model.Specimen.Storages)
                                {
                                    <span>@storage.Nature @storage.Form @storage.FixativeTreatment @storage.Medium</span>
                                }
                            </dd>
                        }
                        @if (@Model.Specimen.CollectionNames.Any())
                        {
                            <dt>Collection Names</dt>
                            <dd>
                                @for (int i = 0; i < Model.Specimen.CollectionNames.Count; i++)
                                {
                                    <a href="/search?collection=@HttpUtility.UrlEncode(Model.Specimen.CollectionNames[i])">@Model.Specimen.CollectionNames[i]</a>@(i != Model.Specimen.CollectionNames.Count - 1 ? "," : "")
                                }
                            </dd>
                        }
                        @if (@Model.Specimen.CollectionPlans.Any())
                        {
                            <dt>Collection Plans</dt>
                            <dd>
                                @for (int i = 0; i < Model.Specimen.CollectionPlans.Count; i++)
                                {
                                    <a href="/search?collection=@HttpUtility.UrlEncode(Model.Specimen.CollectionPlans[i])">@Model.Specimen.CollectionPlans[i]</a>@(i != Model.Specimen.CollectionPlans.Count - 1 ? "," : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.AcquisitionInformation))
                        {
                            <dt>Acquisition Information</dt>
                            <dd>@Model.Specimen.AcquisitionInformation</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ExpeditionName))
                        {
                            <dt>Acquisition Information</dt>
                            <dd><a href="/search?keyword=@HttpUtility.UrlEncode(Model.Specimen.ExpeditionName)">@Model.Specimen.ExpeditionName</a></dd>
                        }
                    </dl>
                </div>

                <div class="detailed dl-horizontal">
                    <dl>
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectionEventCode))
                        {
                            <dt>Collection Event Code</dt>
                            <dd>@Model.Specimen.CollectionEventCode</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.SamplingMethod))
                        {
                            <dt>Sampling Method</dt>
                            <dd>@Model.Specimen.SamplingMethod</dd>
                        }
                        @if (Model.Specimen.DateVisitedFrom.HasValue)
                        {
                            <dt>Date Visited From</dt>
                            <dd>@Model.Specimen.DateVisitedFrom.Value.ToString(Model.Specimen.DateVisitedFrom.Value == Model.Specimen.DateVisitedFrom.Value.Date ? "d" : "g")</dd>
                        }
                        @if (Model.Specimen.DateVisitedTo.HasValue)
                        {
                            <dt>Date Visited To</dt>
                            <dd>@Model.Specimen.DateVisitedTo.Value.ToString(Model.Specimen.DateVisitedTo.Value == Model.Specimen.DateVisitedTo.Value.Date ? "d" : "g")</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.DepthTo))
                        {
                            <dt>Depth To (m)</dt>
                            <dd>@Model.Specimen.DepthTo</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.DepthFrom))
                        {
                            <dt>Depth From (m)</dt>
                            <dd>@Model.Specimen.DepthFrom</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.CollectedBy))
                        {
                            <dt>Collected By</dt>
                            <dd>@Model.Specimen.CollectedBy</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.SiteCode))
                        {
                            <dt>Site Code</dt>
                            <dd>@Model.Specimen.SiteCode</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Ocean))
                        {
                            <dt>Ocean</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.Ocean)">@Model.Specimen.Ocean</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Continent))
                        {
                            <dt>Continent</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.Continent)">@Model.Specimen.Continent</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Country))
                        {
                            <dt>Country</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.Country)">@Model.Specimen.Country</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.State))
                        {
                            <dt>State</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.State)">@Model.Specimen.State</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.District))
                        {
                            <dt>District</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.District)">@Model.Specimen.District</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Town))
                        {
                            <dt>Town</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.Town)">@Model.Specimen.Town</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.NearestNamedPlace))
                        {
                            <dt>Nearest Named Place</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.NearestNamedPlace)">@Model.Specimen.NearestNamedPlace</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.PreciseLocation))
                        {
                            <dt>Precise Location</dt>
                            <dd>@Model.Specimen.PreciseLocation</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MinimumElevation))
                        {
                            <dt>Minimum Elevation</dt>
                            <dd>@Model.Specimen.MinimumElevation</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MaximumElevation))
                        {
                            <dt>Maximum Elevation</dt>
                            <dd>@Model.Specimen.MaximumElevation</dd>
                        }
                        @foreach (var association in @Model.Specimen.Associations)
                        {
                            <dt>@association.Type</dt>
                            <dd>@Html.RenderAssociationDescription(association)</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Latitude))
                        {
                            <dt>Latitude</dt>
                            <dd>@Model.Specimen.Latitude</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Longitude))
                        {
                            <dt>Longitude</dt>
                            <dd>@Model.Specimen.Longitude</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.GeodeticDatum))
                        {
                            <dt>Geodetic Datum</dt>
                            <dd>@Model.Specimen.GeodeticDatum</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.SiteRadius))
                        {
                            <dt>Site Radius</dt>
                            <dd>@Model.Specimen.SiteRadius</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.GeoreferenceBy))
                        {
                            <dt>Georeference By</dt>
                            <dd>@Model.Specimen.GeoreferenceBy</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.GeoreferenceDate))
                        {
                            <dt>Georeference Date</dt>
                            <dd>@Model.Specimen.GeoreferenceDate</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.GeoreferenceProtocol))
                        {
                            <dt>Georeference Protocol</dt>
                            <dd>@Model.Specimen.GeoreferenceProtocol</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.GeoreferenceSource))
                        {
                            <dt>Georeference Source</dt>
                            <dd>@Model.Specimen.GeoreferenceSource</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogySpecies))
                        {
                            <dt>Mineralogy Species</dt>
                            <dd>@Model.Specimen.MineralogySpecies</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyVariety))
                        {
                            <dt>Mineralogy Variety</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyVariety)">@Model.Specimen.MineralogyVariety</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyGroup))
                        {
                            <dt>Mineralogy Group</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyGroup)">@Model.Specimen.MineralogyGroup</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyClass))
                        {
                            <dt>Mineralogy Class</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MineralogyClass)">@Model.Specimen.MineralogyClass</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyAssociatedMatrix))
                        {
                            <dt>Mineralogy Associated Matrix</dt>
                            <dd>@Model.Specimen.MineralogyAssociatedMatrix</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MineralogyType))
                        {
                            <dt>Mineralogy Type</dt>
                            <dd>@Model.Specimen.MineralogyType</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesName))
                        {
                            <dt>Meteorites Name</dt>
                            <dd>@Model.Specimen.MeteoritesName</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesClass))
                        {
                            <dt>Meteorites Class</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MeteoritesClass)">@Model.Specimen.MeteoritesClass</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesGroup))
                        {
                            <dt>Meteorites Group</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.MeteoritesGroup)">@Model.Specimen.MeteoritesGroup</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesType))
                        {
                            <dt>Meteorites Type</dt>
                            <dd>@Model.Specimen.MeteoritesType</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesMinerals))
                        {
                            <dt>Meteorites Minerals</dt>
                            <dd>@Model.Specimen.MeteoritesMinerals</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesSpecimenWeight))
                        {
                            <dt>Meteorites Specimen Weight</dt>
                            <dd>@Model.Specimen.MeteoritesSpecimenWeight</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesTotalWeight))
                        {
                            <dt>Meteorites Total Weight</dt>
                            <dd>@Model.Specimen.MeteoritesTotalWeight</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesDateFell))
                        {
                            <dt>Meteorites Date Fell</dt>
                            <dd>@Model.Specimen.MeteoritesDateFell</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.MeteoritesDateFound))
                        {
                            <dt>Meteorites Date Found</dt>
                            <dd>@Model.Specimen.MeteoritesDateFound</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesName))
                        {
                            <dt>Tektites Name</dt>
                            <dd>@Model.Specimen.TektitesName</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesClassification))
                        {
                            <dt>Tektites Classification</dt>
                            <dd><a href="/search?geotype=@HttpUtility.UrlEncode(Model.Specimen.TektitesClassification)">@Model.Specimen.TektitesClassification</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesShape))
                        {
                            <dt>Tektites Shape</dt>
                            <dd>@Model.Specimen.TektitesShape</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesLocalStrewnfield))
                        {
                            <dt>Tektites Local Strewnfield</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.TektitesLocalStrewnfield)">@Model.Specimen.TektitesLocalStrewnfield</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TektitesGlobalStrewnfield))
                        {
                            <dt>Tektites Global Strewnfield</dt>
                            <dd><a href="/search?locality=@HttpUtility.UrlEncode(Model.Specimen.TektitesGlobalStrewnfield)">@Model.Specimen.TektitesGlobalStrewnfield</a></dd>
                        }
                    </dl>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(Model.Specimen.PrimaryClassification))
                {
                    <div class="classification">
                        <h4>Primary Classification</h4>
                        <a href="/search?classification=@HttpUtility.UrlEncode(Model.Specimen.PrimaryClassification)">@Model.Specimen.PrimaryClassification</a>
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.SecondaryClassification))
                        {
                            <h4>Secondary Classification</h4>
                            <a href="/search?classification=@HttpUtility.UrlEncode(Model.Specimen.SecondaryClassification)">@Model.Specimen.SecondaryClassification</a>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.TertiaryClassification))
                        {
                            <h4>Tertiary Classification</h4>
                            <a href="/search?classification=@HttpUtility.UrlEncode(Model.Specimen.TertiaryClassification)">@Model.Specimen.TertiaryClassification</a>
                        }
                    </div>
                }
                
                <div>
                    <dl>
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Category))
                        {
                            <dt>Category</dt>
                            <dd><a href="/search?category=@HttpUtility.UrlEncode(@Model.Specimen.Category.ToLower())">@Model.Specimen.Category</a><br /></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.ScientificGroup))
                        {
                            <dt>Scientific Group</dt>
                            <dd><a href="/search?specimenscientificgroup=@HttpUtility.UrlEncode(@Model.Specimen.ScientificGroup.ToLower())">@Model.Specimen.ScientificGroup</a><br /></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Discipline))
                        {
                            <dt>Discipline</dt>
                            <dd><a href="/search?discipline=@HttpUtility.UrlEncode(@Model.Specimen.Discipline.ToLower())">@Model.Specimen.Discipline</a><br /></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Type))
                        {
                            <dt>Type of Item</dt>
                            <dd><a href="/search?itemtype=@HttpUtility.UrlEncode(@Model.Specimen.Type.ToLower())">@Model.Specimen.Type</a><br /></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Kingdom))
                        {
                            <dt>Kingdom</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Kingdom)">@Model.Specimen.Taxonomy.Kingdom</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Phylum))
                        {
                            <dt>Phylum</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Phylum)">@Model.Specimen.Taxonomy.Phylum</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Subphylum))
                        {
                            <dt>Subphylum</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Subphylum)">@Model.Specimen.Taxonomy.Subphylum</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Superclass))
                        {
                            <dt>Superclass</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Superclass)">@Model.Specimen.Taxonomy.Superclass</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Class))
                        {
                            <dt>Class</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Class)">@Model.Specimen.Taxonomy.Class</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Subclass))
                        {
                            <dt>Subclass</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Subclass)">@Model.Specimen.Taxonomy.Subclass</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Superorder))
                        {
                            <dt>Superorder</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Superorder)">@Model.Specimen.Taxonomy.Superorder</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Order))
                        {
                            <dt>Order</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Order)">@Model.Specimen.Taxonomy.Order</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Suborder))
                        {
                            <dt>Suborder</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Suborder)">@Model.Specimen.Taxonomy.Suborder</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Infraorder))
                        {
                            <dt>Infraorder</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Infraorder)">@Model.Specimen.Taxonomy.Infraorder</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Superfamily))
                        {
                            <dt>Superfamily</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Superfamily)">@Model.Specimen.Taxonomy.Superfamily</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Family))
                        {
                            <dt>Family</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Family)">@Model.Specimen.Taxonomy.Family</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Subfamily))
                        {
                            <dt>Subfamily</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Subfamily)">@Model.Specimen.Taxonomy.Subfamily</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Genus))
                        {
                            <dt>Genus</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Genus)">@Model.Specimen.Taxonomy.Genus</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Subgenus))
                        {
                            <dt>Subgenus</dt>
                            <dd><a href="/search?taxon=@HttpUtility.UrlEncode(Model.Specimen.Taxonomy.Subgenus)">@Model.Specimen.Taxonomy.Subgenus</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Species))
                        {
                            <dt>Species Name</dt>
                            <dd>@Model.Specimen.Taxonomy.Species</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Specimen.Taxonomy.Subspecies))
                        {
                            <dt>Subspecies</dt>
                            <dd>@Model.Specimen.Taxonomy.Subspecies</dd>
                        }
                        @if (Model.Specimen.Keywords.Any())
                        {
                            <dt>Keywords</dt>
                            <dd>
                                @for (int i = 0; i < Model.Specimen.Keywords.Count; i++)
                                {
                                    <a href="/search?keyword=@HttpUtility.UrlEncode(Model.Specimen.Keywords[i])">@Model.Specimen.Keywords[i]</a>@(i != Model.Specimen.Keywords.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                    </dl>
                </div>
                
                @if (Model.RelatedItems.Any() || Model.RelatedSpecimens.Any())
                {
                    <div class="related-items">
                        <h4>Related Items</h4>
                        @foreach (var relatedItem in Model.RelatedItems)
                        {
                            <a href="/@relatedItem.Id">
                                <img src="@(string.IsNullOrWhiteSpace(relatedItem.ThumbnailUri) ? "http://placehold.it/110" : relatedItem.ThumbnailUri)" width="110" height="110" class="img-thumbnail" />
                                <span>@relatedItem.Title</span>
                            </a>
                            <br/>
                        }
                        @foreach (var relatedSpecimen in Model.RelatedSpecimens)
                        {
                            <a href="/@relatedSpecimen.Id">
                                <img src="@(string.IsNullOrWhiteSpace(relatedSpecimen.ThumbnailUri) ? "http://placehold.it/110" : relatedSpecimen.ThumbnailUri)" width="110" height="110" class="img-thumbnail" />
                                <span>@relatedSpecimen.Title</span>
                            </a>
                            <br/>
                        }
                    </div>
                }
                
                @if (Model.RelatedSpeciesSpecimenItemCount > 0)
                {
                    <div>
                        <h4>
                            <a href="/search?taxon=@HttpUtility.UrlEncode(@Model.Specimen.Taxonomy.TaxonName)">See all the things related to this specimen (@Model.RelatedSpeciesSpecimenItemCount)</a>
                        </h4>
                    </div>
                }

                @if (Model.RelatedArticles.Any())
                {
                    <div class="related-articles">
                        <h4>Related Articles</h4>
                        @foreach (var relatedArticle in Model.RelatedArticles)
                        {
                            <a href="/@relatedArticle.Id">
                                <img src="@(string.IsNullOrWhiteSpace(relatedArticle.ThumbnailUri) ? "http://placehold.it/110" : relatedArticle.ThumbnailUri)" width="110" height="110" class="img-thumbnail" />
                                <span>@relatedArticle.Title</span>
                            </a>
                            <br/>
                        }
                    </div>
                }
                
                @if (Model.RelatedSpecies.Any())
                {
                    <div class="related-species">
                        <h4>Related Species</h4>
                        @foreach (var relatedSpecies in Model.RelatedSpecies)
                        {
                            <a href="/@relatedSpecies.Id">
                                <img src="@(string.IsNullOrWhiteSpace(relatedSpecies.ThumbnailUri) ? "http://placehold.it/110" : relatedSpecies.ThumbnailUri)" width="110" height="110" class="img-thumbnail" />
                                <span>@relatedSpecies.Title</span>
                            </a>
                            <br/>
                        }
                    </div>
                }                              
            </div>
        </div>
    </div>
</div>