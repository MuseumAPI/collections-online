@using CollectionsOnline.Core.Models
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<CollectionsOnline.WebSite.Features.Species.SpeciesViewTransformerResult>
@{
    Layout = "layout.cshtml";
}
<div class="container no-nav">
    <div class="row">
        <div class="col-md-12">
            <div class="record">
                <div class="title">
                    <h1>
                        @if (!string.IsNullOrWhiteSpace(Model.Species.ScientificName))
                        {
                            <em>@Model.Species.ScientificName</em>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.CommonName))
                        {
                            @Model.Species.Taxonomy.CommonName
                        }
                    </h1>
                </div>

                <div class="images">
                    @{
                        var imageMedia = Model.Species.Media.Where(x => x is ImageMedia).Cast<ImageMedia>().ToList();
                        for (int i = 0; i < imageMedia.Count; i++)
                        {
                            if (i == 0)
                            {
                                <img src="@imageMedia[i].Medium.Uri" width="@imageMedia[i].Medium.Width" height="@imageMedia[i].Medium.Height" class="img-rounded center-block" />
                            }
                            else
                            {
                                <img src="@imageMedia[i].Thumbnail.Uri" width="100" height="100" class="img-thumbnail" />
                            }
                        }
                    }
                </div>

                <div class="main-content">
                    <dl>
                        @if (!string.IsNullOrWhiteSpace(Model.Species.GeneralDescription))
                        {
                            <dt>General Description</dt>
                            <dd>@Model.Species.GeneralDescription</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Biology))
                        {
                            <dt>Biology</dt>
                            <dd>@Model.Species.Biology</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Distribution))
                        {
                            <dt>Distribution</dt>
                            <dd>@Model.Species.Distribution</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Habitat))
                        {
                            <dt>Habitat</dt>
                            <dd>@Model.Species.Habitat</dd>
                        }
                    </dl>
                </div>

                <div class="detailed dl-horizontal">
                    <dl>
                        @if (!string.IsNullOrWhiteSpace(Model.Species.AnimalType))
                        {
                            <dt>Animal Type</dt>
                            <dd><a href="/search?speciestype=@HttpUtility.UrlEncode(Model.Species.AnimalType.ToLower())">@Model.Species.AnimalType</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.AnimalSubType))
                        {
                            <dt>Animal SubType</dt>
                            <dd><a href="/search?speciessubtype=@HttpUtility.UrlEncode(Model.Species.AnimalSubType.ToLower())">@Model.Species.AnimalSubType</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.FastFact))
                        {
                            <dt>Fast Fact</dt>
                            <dd>@Model.Species.FastFact</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.BriefId))
                        {
                            <dt>Brief Id</dt>
                            <dd>@Model.Species.BriefId</dd>
                        }
                        @if (Model.Species.Colours.Any())
                        {
                            <dt>Colours</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.Colours.Count; i++)
                                {
                                    <span>@Model.Species.Colours[i]</span>@(i != Model.Species.Colours.Count - 1 ? ", " : "")
                                }                                
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.MaximumSize))
                        {
                            <dt>Maximum Size</dt>
                            <dd>@Model.Species.MaximumSize</dd>
                        }
                        @if (Model.Species.Habitats.Any())
                        {
                            <dt>Habitats</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.Habitats.Count; i++)
                                {
                                    <a href="/search?habitat=@HttpUtility.UrlEncode(Model.Species.Habitats[i])">@Model.Species.Habitats[i]</a>@(i != Model.Species.Habitats.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (Model.Species.WhereToLook.Any())
                        {
                            <dt>Where To Look</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.WhereToLook.Count; i++)
                                {
                                    <a href="/search?habitat=@HttpUtility.UrlEncode(Model.Species.WhereToLook[i])">@Model.Species.WhereToLook[i]</a>@(i != Model.Species.WhereToLook.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (Model.Species.WhenActive.Any())
                        {
                            <dt>When Active</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.WhenActive.Count; i++)
                                {
                                    <span>@Model.Species.WhenActive[i]</span>@(i != Model.Species.WhenActive.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (Model.Species.NationalParks.Any())
                        {
                            <dt>National Parks</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.NationalParks.Count; i++)
                                {
                                    <a href="/search?locality=@HttpUtility.UrlEncode(Model.Species.NationalParks[i])">@Model.Species.NationalParks[i]</a>@(i != Model.Species.NationalParks.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Diet))
                        {
                            <dt>Diet</dt>
                            <dd>@Model.Species.Diet</dd>
                        }
                        @if (Model.Species.DietCategories.Any())
                        {
                            <dt>Diet Categories</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.DietCategories.Count; i++)
                                {
                                    <span>@Model.Species.DietCategories[i]</span>@(i != Model.Species.DietCategories.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Hazards))
                        {
                            <dt>Hazards</dt>
                            <dd>@Model.Species.Hazards</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Endemicity))
                        {
                            <dt>Endemicity</dt>
                            <dd><a href="/search?speciesendemicity=@HttpUtility.UrlEncode(Model.Species.Endemicity.ToLower())">@Model.Species.Endemicity</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Commercial))
                        {
                            <dt>Commercial</dt>
                            <dd>@Model.Species.Commercial</dd>
                        }
                        @if (Model.Species.ConservationStatuses.Any())
                        {
                            <dt>Conservation Statuses</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.ConservationStatuses.Count; i++)
                                {
                                    <a href="/search?keyword=@HttpUtility.UrlEncode(Model.Species.ConservationStatuses[i])">@Model.Species.ConservationStatuses[i]</a>@(i != Model.Species.ConservationStatuses.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.ScientificDiagnosis))
                        {
                            <dt>Scientific Diagnosis</dt>
                            <dd>@Model.Species.ScientificDiagnosis</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Web))
                        {
                            <dt>Web</dt>
                            <dd>@Model.Species.Web</dd>
                        }
                        @if (Model.Species.Plants.Any())
                        {
                            <dt>Plants</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.Plants.Count; i++)
                                {
                                    <span>@Model.Species.Plants[i]</span>@(i != Model.Species.Plants.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.FlightStart))
                        {
                            <dt>Flight Start</dt>
                            <dd>@Model.Species.FlightStart</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.FlightEnd))
                        {
                            <dt>Flight End</dt>
                            <dd>@Model.Species.FlightEnd</dd>
                        }
                        @if (Model.Species.Depths.Any())
                        {
                            <dt>Depths</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.Depths.Count; i++)
                                {
                                    <span>@Model.Species.Depths[i]</span>@(i != Model.Species.Depths.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (Model.Species.WaterColumnLocations.Any())
                        {
                            <dt>Water Column Locations</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.WaterColumnLocations.Count; i++)
                                {
                                    <span>@Model.Species.WaterColumnLocations[i]</span>@(i != Model.Species.WaterColumnLocations.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.ScientificName))
                        {
                            <dt>Scientific Name</dt>
                            <dd>@Model.Species.ScientificName</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Author))
                        {
                            <dt>Scientific Author</dt>
                            <dd>@Model.Species.Taxonomy.Author</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.CommonName))
                        {
                            <dt>Common Name</dt>
                            <dd>@Model.Species.Taxonomy.CommonName</dd>
                        }
                        @if (Model.Species.Taxonomy.OtherCommonNames.Any())
                        {
                            <dt>Other Names</dt>
                            <dd>
                                @for (int i = 0; i < Model.Species.Taxonomy.OtherCommonNames.Count; i++)
                                {
                                    <span>@Model.Species.Taxonomy.OtherCommonNames[i]</span>@(i != Model.Species.Taxonomy.OtherCommonNames.Count - 1 ? ", " : "")
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Kingdom))
                        {
                            <dt>Kingdom</dt>
                            <dd>@Model.Species.Taxonomy.Kingdom</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Phylum))
                        {
                            <dt>Phylum</dt>
                            <dd><a href="/search?phylum=@HttpUtility.UrlEncode(Model.Species.Taxonomy.Phylum)">@Model.Species.Taxonomy.Phylum</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Subphylum))
                        {
                            <dt>Subphylum</dt>
                            <dd>@Model.Species.Taxonomy.Subphylum</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Superclass))
                        {
                            <dt>Superclass</dt>
                            <dd>@Model.Species.Taxonomy.Superclass</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Class))
                        {
                            <dt>Class</dt>
                            <dd><a href="/search?class=@HttpUtility.UrlEncode(Model.Species.Taxonomy.Class)">@Model.Species.Taxonomy.Class</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Subclass))
                        {
                            <dt>Subclass</dt>
                            <dd>@Model.Species.Taxonomy.Subclass</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Superorder))
                        {
                            <dt>Superorder</dt>
                            <dd>@Model.Species.Taxonomy.Superorder</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Order))
                        {
                            <dt>Order</dt>
                            <dd><a href="/search?order=@HttpUtility.UrlEncode(Model.Species.Taxonomy.Order)">@Model.Species.Taxonomy.Order</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Suborder))
                        {
                            <dt>Suborder</dt>
                            <dd>@Model.Species.Taxonomy.Suborder</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Infraorder))
                        {
                            <dt>Infraorder</dt>
                            <dd>@Model.Species.Taxonomy.Infraorder</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Superfamily))
                        {
                            <dt>Superfamily</dt>
                            <dd>@Model.Species.Taxonomy.Superfamily</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Family))
                        {
                            <dt>Family</dt>
                            <dd><a href="/search?family=@HttpUtility.UrlEncode(Model.Species.Taxonomy.Family)">@Model.Species.Taxonomy.Family</a></dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Subfamily))
                        {
                            <dt>Subfamily</dt>
                            <dd>@Model.Species.Taxonomy.Subfamily</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Genus))
                        {
                            <dt>Genus</dt>
                            <dd>@Model.Species.Taxonomy.Genus</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Subgenus))
                        {
                            <dt>Subgenus</dt>
                            <dd>@Model.Species.Taxonomy.Subgenus</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Species))
                        {
                            <dt>SpeciesName</dt>
                            <dd>@Model.Species.Taxonomy.Species</dd>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.Species.Taxonomy.Subspecies))
                        {
                            <dt>Subspecies</dt>
                            <dd>@Model.Species.Taxonomy.Subspecies</dd>
                        }
                    </dl>
                </div>

                @if (Model.RelatedItems.Any() || Model.RelatedSpecimens.Any())
                {
                    <div class="related-items">
                        <h4>Related Items</h4>
                        @foreach (var relatedItem in Model.RelatedItems)
                        {
                            <a href="/@relatedItem.Id">
                                @if (!string.IsNullOrWhiteSpace(relatedItem.ThumbnailUri))
                                {
                                    <img src="@relatedItem.ThumbnailUri" width="100" height="100" class="img-thumbnail" />
                                }
                                <span>@relatedItem.Title</span>
                            </a>
                            <br/>
                        }
                        @foreach (var relatedSpecimen in Model.RelatedSpecimens)
                        {
                            <a href="/@relatedSpecimen.Id">
                                @if (!string.IsNullOrWhiteSpace(relatedSpecimen.ThumbnailUri))
                                {
                                    <img src="@relatedSpecimen.ThumbnailUri" width="100" height="100" class="img-thumbnail" />
                                }
                                <span>@relatedSpecimen.Title</span>
                            </a>
                            <br/>
                        }
                    </div>
                }
                
                @if (Model.RelatedSpecimenCount > 0)
                {
                    <div>
                        <h4>
                            <a href="/search?species=@Model.Species.Id">See all related specimens (@Model.RelatedSpecimenCount)</a>
                        </h4>
                    </div>
                }

                @if (Model.Species.Authors.Any())
                {
                    <div class="authors">Authors</div>
                    foreach (var author in @Model.Species.Authors)
                    {
                        <div>
                            @if (author.ProfileImage != null)
                            {
                                <img src="@author.ProfileImage.Thumbnail.Uri" width="100" height="100" class="img-thumbnail" />
                            }
                            <h4>@author.Name</h4>
                            <p>@author.Biography</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>