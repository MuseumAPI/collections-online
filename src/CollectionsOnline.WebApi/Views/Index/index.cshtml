@using CollectionsOnline.Core.Config
@using CollectionsOnline.WebApi.Metadata
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<WebApiMetadata>>>>
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Collections API</title>
    </head>
    <body>
        <h1>API Overview</h1>
        <p>API is a set of methods based on restful ideas over HTTP.  At this time it only supports the GET verb and responses are in JSON only.</p>
        <p>The root uri for the current version is located at</p>
        <pre>@RenderContext.Context.Request.Url.SiteBase</pre>

        <h2>Versions</h2>
        <p>At this time the API supports one version only, this is the default version returned via the root uri. It can also be accessed via the following uri for future versions.</p>
        <pre>@RenderContext.Context.Request.Url.SiteBase/v1/</pre>
    
        <h2>Pagination</h2>
        <p>Requests that return multiple objects will by default display 30 objects per request.  You can specify more objects to return by specifiying a <em>?limit</em> query string parameter up to a maximum of @Constants.PagingPageSizeMax objects.</p>
        <p>You can also specify an object offset in order to retrieve results for different pages via a <em>?offset</em> query string parameter.</p>
        <h4>Link Header</h4>
        <p>The actual pagination information is stored in the response headers.  In order to allow easy traversing of data sets refer to the <a href="http://tools.ietf.org/html/rfc5988">Link header</a> to get the next page of objects in your request. E.g</p>
        <pre>Link: &lt;http://localhost:7820/v1/items?limit=50&amp;offset=100&gt;; rel=&quot;next&quot;,&lt;http://localhost:7820/v1/items?limit=50&gt;; rel=&quot;prev&quot;</pre>
        <p>The total results is also stored in the response headers. E.g</p>
        <pre>Total-Results: 87366</pre>
    
        <h2>Response Envelope</h2>
        <p>In order to make debuging with the api easy, we have included a way to encapsulate all the data needed for a response in the body of the response without having to dive into the actual headers. In order to do this simply add the value <em>?envelope=true</em> to the query string</p>
    
        @foreach (var webApiOperationMetadata in @Model)
        {
            <h2>Operations about @webApiOperationMetadata.Key</h2>

            foreach (var metadata in webApiOperationMetadata.Value)
            {
                <div>
                    <h3>@metadata.Method</h3>
                    <h3>@metadata.Path</h3>

                    @if (!string.IsNullOrEmpty(metadata.Description))
                    {
                        <strong>Description</strong>
                        <p>@metadata.Description</p>
                    }

                    @if (metadata.Parameters != null)
                    {
                        <strong>Parameters</strong>
                        <table>
                            <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var parameter in metadata.Parameters)
                                {
                                    <tr>
                                        <td>@parameter.Item1</td>
                                        <td>@parameter.Item2</td>
                                        <td>@parameter.Item3</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    @if (metadata.StatusCodes != null)
                    {
                        <strong>Valid response status codes</strong>
                        <table>
                            <thead>
                                <tr>
                                    <th>HTTP status code</th>
                                    <th>Name</th>
                                    <th>Reason</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var statusCode in metadata.StatusCodes)
                                {
                                    <tr>
                                        <td>@((int)statusCode.Key)</td>
                                        <td>@statusCode.Key</td>
                                        <td>@statusCode.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    @if (!string.IsNullOrEmpty(metadata.SampleResponse))
                    {
                        <strong>Sample Response</strong>
                        <pre>@metadata.SampleResponse</pre>
                    }

                    @if (!string.IsNullOrEmpty(metadata.ExampleUrl))
                    {
                        <strong>Example URL</strong>
                        <a href="@metadata.ExampleUrl">@metadata.ExampleUrl</a>
                    }
                </div>
            }
        }
    </body>
</html>